#!/sbin/sh
# DBKP Flashable UEFI Installer
# modified from the TWRP A/B Installer Backend by osm0sis, Dees_Troy and topjohnwu

OUTFD=/proc/self/fd/$2;
ZIPFILE="$3";

ui_print() {
  if $BOOTMODE; then
    echo "$1";
  else
    echo -e "ui_print $1\nui_print" >> $OUTFD;
  fi;
}
abort() { ui_print " "; ui_print "$1"; exit 1; }

# detect Magisk app/booted flashing
BOOTMODE=false;
ps | grep zygote | grep -v grep >/dev/null && BOOTMODE=true;
$BOOTMODE || ps -A 2>/dev/null | grep zygote | grep -v grep >/dev/null && BOOTMODE=true;

ui_print "#############################################";
ui_print "#            DBPK UEFI installer            #";
ui_print "#############################################";
ui_print " ";

# /dev/tmp is safe for both booted and recovery installs
tmp=/dev/tmp/uefi-install;
# target partition without the slot suffix
target=/dev/block/bootdevice/by-name/boot;

name=$(basename $target);

ui_print "Unpacking the installer...";
rm -rf $tmp;
mkdir -p $tmp;
unzip -o "$ZIPFILE" -d $tmp || abort "Failed to extract zip!";

cd $tmp;
uefipayload=`(ls *_EFI.fd) 2>/dev/null`;
dbkpcfg=`(ls DualBoot.*.cfg) 2>/dev/null`;
shellcode=`(ls ShellCode.*.bin) 2>/dev/null`;
[ "$uefipayload" ] || abort "No UEFI payload found in zip!";
[ "$dbkpcfg" ] || abort "No dbkp config found in zip!";
[ "$shellcode" ] || abort "No dbkp shellcode found in zip!";

tool=$tmp/magiskboot;
patcher=$tmp/DualBootKernelPatcher;
chmod 755 $tool;
chmod 755 $patcher;

backuppath="/sdcard/boot_backup"
slot=$(getprop ro.boot.slot_suffix)
ui_print " ";
ui_print "Current slot: $slot."

# if [ "$slot" ]; then
  if [ "$uefipayload" ]; then
    ui_print "Running image patcher on $name$slot...";
    dd bs=1048576 if=$target$slot of=boot.img || abort "Failed to dump image!";

    ui_print "Backing up original boot$slot.img..."
    rm -f "$backuppath$slot.img"
    cp -f boot.img "$backuppath$slot.img"
    ui_print "Original boot$slot backed up to $backuppath$slot.img!"

    $tool unpack -h boot.img || abort "Failed to unpack image!";

    $patcher kernel $uefipayload patchedKernel $dbkpcfg $shellcode || abort "Failed to patch the kernel";
    mv patchedKernel kernel

    $tool repack boot.img || abort "Failed to repack image!";
    $tool cleanup;
  fi;
# else
#   ui_print "Failed to get current slot!";
#   abort "Exiting...";
# fi;

blockdev --setrw $target$slot;
cat new-boot.img /dev/zero > $target$slot 2>/dev/null || true;
rm -f new-boot.img;

if [ "$uefipayload" ]; then
  ui_print " ";
  ui_print "Image patching complete!";
fi;

cd /;
rm -rf /dev/tmp;

ui_print " ";
ui_print "Done patching!";
